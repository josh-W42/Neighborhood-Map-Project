{"version":3,"sources":["utils/GoogleApiHelpers.js","SideUI.js","Map.js","serviceWorker.js","App.js","index.js"],"names":["searchNearby","google","map","request","Promise","resolve","reject","maps","places","PlacesService","nearbySearch","results","status","pagination","PlacesServiceStatus","OK","SideUI","input","_this","this","props","textSearch","searchFor","location","center","radius","then","onMapUpdate","panTo","lat","geometry","lng","catch","response","alert","console","log","catagory","_this2","options","rankby","keyword","place","onResultClick","_this3","react_default","a","createElement","id","className","type","placeholder","value","onClick","e","preventDefault","onSearch","document","querySelector","onChange","onNearbySearch","target","tabIndex","htmlFor","name","length","key","onKeyUp","keyCode","resultClick","src","icon","alt","vicinity","formatted_address","opening_hours","concat","open_now","Component","MapContainer","state","infoWindowOpen","activeMarker","activePlace","onMarkerClick","marker","setState","placeData","mapProps","setCurrentLocation","callback","navigator","geolocation","getCurrentPosition","position","cord","coords","latitude","longitude","setCenter","error","warn","code","message","enableHighAccuracy","timeout","maximumAge","src_SideUI","dist","role","tabindex","clickableIcons","fullscreenControl","mapTypeControl","onReady","bind","zoom","animation","Animation","BOUNCE","visible","onClose","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","caches","open","cache","addAll","onUpdate","onSuccess","URL","process","origin","addEventListener","fetch","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","App","_Component","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","hamburger","sideUI","classList","contains","style","left","toggle","onHamburgerClick","Map","GoogleApiWrapper","apiKey","ReactDOM","render","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.8a1a1a96.chunk.js","sourcesContent":["export const apiKey = 'AIzaSyDXbgkEoSEdXPyG7GDmuf7Mb1wW8RZ1Ek4';\r\n\r\nexport function searchNearby(google, map, request) {\r\n  return new Promise((resolve, reject) => {\r\n    const service = new google.maps.places.PlacesService(map);\r\n\r\n    service.nearbySearch(request, (results, status, pagination) => {\r\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\r\n\r\n        resolve(results, pagination);\r\n      } else {\r\n        reject(results, status);\r\n      }\r\n    })\r\n  });\r\n}\r\n\r\nexport function searchFor(google, map, request) {\r\n  return new Promise((resolve, reject) => {\r\n    const service = new google.maps.places.PlacesService(map);\r\n\r\n    service.textSearch(request, (results, status) => {\r\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\r\n\r\n        resolve(results);\r\n      } else {\r\n        reject(results, status);\r\n      }\r\n    })\r\n  });\r\n}\r\n","import React, { Component } from 'react';\r\nimport { searchFor, searchNearby } from './utils/GoogleApiHelpers.js'\r\n\r\n\r\nclass SideUI extends Component {\r\n\r\n  /*\r\n   This function is called when a user uses the text input field in sideUI\r\n   Makes a call to the google maps places api\r\n  */\r\n  onSearch(input) {\r\n\r\n    const map = this.props.map;\r\n    const {google} = this.props;\r\n    const options = {\r\n      input: input,\r\n      location: map.center,\r\n      radius: '500'\r\n    }\r\n    searchFor(google, map, options)\r\n    .then((results) => {\r\n      this.props.onMapUpdate(results);\r\n      this.props.map.panTo({\r\n        lat: results[0].geometry.location.lat(),\r\n        lng: results[0].geometry.location.lng()\r\n      });\r\n    }).catch((response, status) => {\r\n      this.props.onMapUpdate(response);\r\n      alert(\"No Search Results\");\r\n      console.log(status);\r\n      console.log(response);\r\n    });\r\n  }\r\n\r\n  /*\r\n    This function is called when users select from the sideUI table.\r\n    Makes a call to the google maps place api\r\n  */\r\n  onNearbySearch(catagory) {\r\n\r\n    const map = this.props.map;\r\n    const {google} = this.props;\r\n\r\n    let options = {\r\n      location: map.center,\r\n      radius: '2000',\r\n      rankby: 'distance'\r\n    }\r\n\r\n    switch (catagory) {\r\n      case 'food':\r\n        options.keyword = ['food'];\r\n        break;\r\n      case 'beauty':\r\n        options.keyword = ['spa'];\r\n        break;\r\n      case 'banking':\r\n        options.keyword = ['finance', 'bank', 'atm'];\r\n        break;\r\n      case 'educational':\r\n        options.keyword = ['school', 'library', 'museum'];\r\n        break;\r\n      case 'entertainment':\r\n        options.keyword = ['theater'];\r\n        break;\r\n      default:\r\n        alert(\"Error in Filter Search\");\r\n    }\r\n\r\n    searchNearby(google, map, options)\r\n    .then((results) => {\r\n      this.props.onMapUpdate(results);\r\n    }).catch((response, status) => {\r\n      this.props.onMapUpdate(response);\r\n      console.log(status);\r\n      console.log(response);\r\n    });\r\n  }\r\n\r\n  resultClick(place) {\r\n    this.props.map.panTo({\r\n      lat: place.geometry.location.lat(),\r\n      lng: place.geometry.location.lng()\r\n    });\r\n    this.props.onResultClick(place);\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div id=\"sideUI\">\r\n        <div className=\"mainUISection\">\r\n          <h1>What would you like to search?</h1>\r\n          <form>\r\n            <input\r\n              className=\"searchInput\"\r\n              type=\"text\"\r\n              placeholder=\"Name of Venue or Address\"\r\n            />\r\n            <input\r\n              className=\"searchSubmitBtn\"\r\n              value=\"Search\"\r\n              type=\"submit\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                this.onSearch(document.querySelector('.searchInput').value);\r\n              }} />\r\n          </form>\r\n\r\n          <h2>Search Nearby results by type:</h2>\r\n          <form onChange={ (e) => this.onNearbySearch(e.target.value) }>\r\n            <table id=\"inputTable\">\r\n              <tbody>\r\n                <tr>\r\n                  <td tabIndex=\"0\">\r\n                    <label htmlFor=\"food\">Food</label>\r\n                    <input type=\"radio\" name=\"searchType\" id=\"food\" value=\"food\" />\r\n                  </td>\r\n                  <td tabIndex=\"0\">\r\n                    <label htmlFor=\"banking\">Banking</label>\r\n                    <input type=\"radio\" name=\"searchType\" id=\"banking\" value=\"banking\" />\r\n                  </td>\r\n                  <td tabIndex=\"0\">\r\n                    <label htmlFor=\"beauty\">Beauty</label>\r\n                    <input type=\"radio\" name=\"searchType\" id=\"beauty\" value=\"beauty\" />\r\n                  </td>\r\n                  <td tabIndex=\"0\">\r\n                    <label htmlFor=\"entertainment\">Entertainment</label>\r\n                    <input type=\"radio\" name=\"searchType\" id=\"entertainment\" value=\"entertainment\" />\r\n                  </td>\r\n                  <td tabIndex=\"0\">\r\n                    <label htmlFor=\"educational\">Educational</label>\r\n                    <input type=\"radio\" name=\"searchType\" id=\"educational\" value=\"educational\" />\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </form>\r\n\r\n          <h2>Results:</h2>\r\n          <div className=\"resultsContainer\">\r\n            {\r\n              (this.props.places.length === 0) ? (\r\n                <p>No results found</p>\r\n              ) : (\"\")\r\n            }\r\n            {this.props.places.map( (place) => (\r\n              <div\r\n                tabIndex=\"0\"\r\n                key={place.id}\r\n                className=\"result\"\r\n                onKeyUp={(e) => {\r\n                  if(e.keyCode === 13) {\r\n                    this.resultClick(place);\r\n                  }\r\n                }}\r\n                onClick={() => {\r\n                  this.resultClick(place);\r\n                }}\r\n              >\r\n                <img\r\n                  className=\"businessImage\"\r\n                  src={place.icon}\r\n                  alt={place.name}\r\n                />\r\n                <div className='businessInfo'>\r\n                  <h3 className=\"businessName\">{place.name}</h3>\r\n                  <p className=\"businessAddress\">\r\n                    { (place.vicinity) ? place.vicinity:place.formatted_address }\r\n                  </p>\r\n                  <p className='businessOpen'>\r\n                    { (place.opening_hours) ? `Is currently: ${(place.opening_hours.open_now) ? 'Open':'Closed' }` : ''}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n        </div>\r\n        <div className=\"hamburgerSection\">\r\n          <div id=\"hamburger\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SideUI\r\n","import React, { Component } from 'react';\r\nimport {Map, Marker, InfoWindow} from 'google-maps-react';\r\nimport {searchNearby} from './utils/GoogleApiHelpers.js';\r\nimport SideUI from './SideUI.js';\r\n\r\nclass MapContainer extends Component {\r\n\r\n  state = {\r\n    places: [],\r\n    map: {},\r\n\r\n    infoWindowOpen: false,\r\n    activeMarker: {},\r\n    activePlace: {},\r\n\r\n  }\r\n\r\n  // This function will asign a marker as 'active', so that its' data can\r\n  // be made avalible to other components, like info window\r\n  onMarkerClick = (props, marker, e) => {\r\n    this.setState({\r\n      activePlace: props.placeData,\r\n      infoWindowOpen: true,\r\n      activeMarker: marker\r\n    });\r\n  }\r\n\r\n  /*\r\n    When the google map is ready, it will attempt to get the current location\r\n    of the device and then preform a local search for places that may be\r\n    of interest.\r\n   */\r\n  onReady(mapProps, map) {\r\n    new Promise((resolve) => {\r\n      this.setCurrentLocation(map, resolve)\r\n    })\r\n    .then(() => {\r\n      this.setState({\r\n        map: map\r\n      });\r\n      const {google} = this.props;\r\n      const options = {\r\n        location: map.center,\r\n        radius: '1000',\r\n        type: ['point_of_interest']\r\n      }\r\n      searchNearby(google, map, options)\r\n      .then((results) => {\r\n        this.setState({\r\n          places: results\r\n        });\r\n      }).catch((response, status) => {\r\n        alert(\"Error in Nearby Search\");\r\n        console.log(status);\r\n        console.log(response);\r\n      });\r\n    });\r\n  }\r\n\r\n /*\r\n   Sets the center location for the map.\r\n\r\n   If geolocation is not avalible for this browser or access is denied, the\r\n   default google maps location, san fransisco, CA will be used.\r\n */\r\n  setCurrentLocation(map, callback) {\r\n\r\n    let options = {\r\n      enableHighAccuracy: true,\r\n      timeout: 5000,\r\n      maximumAge: 0\r\n    };\r\n\r\n    function error(error) {\r\n      alert('Geolocation Serivce Failed, using default location');\r\n      console.warn(`ERROR(${error.code}): ${error.message}`);\r\n    }\r\n\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        let cord = position.coords;\r\n        let location = {\r\n          lat: cord.latitude,\r\n          lng: cord.longitude\r\n        };\r\n        map.setCenter(location);\r\n        callback();\r\n      }, error, options);\r\n    } else {\r\n      alert('Geolocation Unavalible, using default location');\r\n      console.log('Geolocation Unavalible, using default location');\r\n      callback();\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <SideUI\r\n          google={this.props.google}\r\n          places={this.state.places}\r\n          map={this.state.map}\r\n          onMapUpdate={ (places) => this.setState({ places: places }) }\r\n          onResultClick={ (place) => {\r\n            this.setState({\r\n              activePlace: place,\r\n              infoWindowOpen: false\r\n             });\r\n          }}\r\n          />\r\n        <Map\r\n          role=\"application\"\r\n          tabindex=\"0\"\r\n          clickableIcons={true}\r\n          fullscreenControl={false}\r\n          mapTypeControl={false}\r\n          onReady={this.onReady.bind(this)}\r\n          google={this.props.google}\r\n          zoom={16}\r\n          >\r\n          {\r\n            this.state.places.map( (place) =>\r\n              {\r\n                return (\r\n                  <Marker\r\n                    tabIndex=\"0\"\r\n                    key={place.id}\r\n                    placeData={place}\r\n                    onClick={this.onMarkerClick}\r\n                    position={{\r\n                      lat: place.geometry.location.lat(),\r\n                      lng: place.geometry.location.lng()\r\n                    }}\r\n                    animation={\r\n                      (this.state.activePlace === place) ? (\r\n                        this.props.google.maps.Animation.BOUNCE\r\n                      ):\"\"\r\n                    }\r\n                    name={place.name}\r\n                    />\r\n                )\r\n              }\r\n             )\r\n          }\r\n          <InfoWindow\r\n            marker={this.state.activeMarker}\r\n            visible={this.state.infoWindowOpen}\r\n            onClose={ () => this.setState({\r\n              infoWindowOpen: false,\r\n              activePlace: {},\r\n              activeMarker: {},\r\n            })}\r\n          >\r\n          <div>\r\n            <h3>{this.state.activePlace.name}</h3>\r\n            <p>\r\n              {\r\n                (this.state.activePlace) ? (\r\n                  (this.state.activePlace.vicinity) ? (\r\n                    this.state.activePlace.vicinity\r\n                  ):(\r\n                    this.state.activePlace.formatted_address\r\n                  )): \"\"\r\n              }\r\n            </p>\r\n          </div>\r\n          </InfoWindow>\r\n        </Map>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MapContainer\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              caches.open('googleMap-v1').then(function(cache) {\n                return cache.addAll([\n                  './',\n                  './App.css',\n                  './Map.js',\n                  './index.css',\n                  './index.js',\n                  './Map.js',\n                  './SideUI.js',\n                  './utils/GoogleApiHelpers.js'\n                ]);\n              });\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Map from './Map.js';\nimport {GoogleApiWrapper} from 'google-maps-react';\nimport { apiKey } from './utils/GoogleApiHelpers.js';\nimport { register } from './serviceWorker.js';\n\nregister('./');\n\n\nexport class App extends Component {\n\n  // This function handles sideUI functionality.\n  onHamburgerClick() {\n    let hamburger = document.querySelector('.hamburger');\n    let sideUI = document.querySelector('#sideUI');\n    if(hamburger.classList.contains('cross')) {\n      sideUI.style.left = '-50%';\n      hamburger.style.left = '0%';\n    } else {\n      sideUI.style.left = '0px';\n      hamburger.style.left = '50%';\n    }\n    hamburger.classList.toggle('cross');\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"topSection\">\n          <div className=\"hamburger\" onClick={this.onHamburgerClick}>\n            <div className=\"bar1\"></div>\n            <div className=\"bar2\"></div>\n            <div className=\"bar3\"></div>\n          </div>\n          <h1>Neighborhood Map</h1>\n        </div>\n        <Map google={this.props.google} />\n      </div>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: apiKey\n})(App)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}